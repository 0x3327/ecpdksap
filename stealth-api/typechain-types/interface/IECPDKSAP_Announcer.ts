/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IECPDKSAP_AnnouncerInterface extends Interface {
  getFunction(
    nameOrSignature: "ethSentWithoutProxy" | "sendEthViaProxy"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Announcement"): EventFragment;

  encodeFunctionData(
    functionFragment: "ethSentWithoutProxy",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendEthViaProxy",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ethSentWithoutProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendEthViaProxy",
    data: BytesLike
  ): Result;
}

export namespace AnnouncementEvent {
  export type InputTuple = [
    schemeId: BigNumberish,
    stealthAddress: AddressLike,
    caller: AddressLike,
    ephemeralPubKey: BytesLike,
    metadata: BytesLike
  ];
  export type OutputTuple = [
    schemeId: bigint,
    stealthAddress: string,
    caller: string,
    ephemeralPubKey: string,
    metadata: string
  ];
  export interface OutputObject {
    schemeId: bigint;
    stealthAddress: string;
    caller: string;
    ephemeralPubKey: string;
    metadata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IECPDKSAP_Announcer extends BaseContract {
  connect(runner?: ContractRunner | null): IECPDKSAP_Announcer;
  waitForDeployment(): Promise<this>;

  interface: IECPDKSAP_AnnouncerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ethSentWithoutProxy: TypedContractMethod<
    [_R: BytesLike, _viewTag: BytesLike],
    [void],
    "nonpayable"
  >;

  sendEthViaProxy: TypedContractMethod<
    [_stealthAddress: AddressLike, _R: BytesLike, _viewTag: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ethSentWithoutProxy"
  ): TypedContractMethod<
    [_R: BytesLike, _viewTag: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendEthViaProxy"
  ): TypedContractMethod<
    [_stealthAddress: AddressLike, _R: BytesLike, _viewTag: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "Announcement"
  ): TypedContractEvent<
    AnnouncementEvent.InputTuple,
    AnnouncementEvent.OutputTuple,
    AnnouncementEvent.OutputObject
  >;

  filters: {
    "Announcement(uint256,address,address,bytes,bytes)": TypedContractEvent<
      AnnouncementEvent.InputTuple,
      AnnouncementEvent.OutputTuple,
      AnnouncementEvent.OutputObject
    >;
    Announcement: TypedContractEvent<
      AnnouncementEvent.InputTuple,
      AnnouncementEvent.OutputTuple,
      AnnouncementEvent.OutputObject
    >;
  };
}
